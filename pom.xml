<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.gotofinal</groupId>
    <artifactId>mbassador</artifactId>
    <version>2.1-SNAPSHOT</version>
    <name>mbassador</name>
    <description>
        Fork of Mbassador (not compatible with original one) that provide better performance of event dispatch. (by decreasing registration performance)
        Also this fork use groovy for any filter implementations.
    </description>

    <!--

    Documentation for this pom see
        http://central.sonatype.org/pages/apache-maven.html

    For deployment (and release of non SNAPSHOT): mvn clean deploy
    For manual release of staging: mvn nexus-staging:release
    tagging and release on github

    -->

    <url>https://github.com/GotoFinal/mbassador</url>
    <licenses>
        <license>
            <name>MIT license</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
        </license>
    </licenses>
    <scm>
        <connection>scm:git:https://github.com/GotoFinal/mbassador.git</connection>
        <developerConnection>scm:git:https://github.com/GotoFinal/mbassador.git</developerConnection>
        <url>https://github.com/GotoFinal/mbassador</url>
    </scm>
    <developers>

        <developer>
            <id>bennidi</id>
            <name>Benjamin Diedrichsen</name>
            <timezone>+1</timezone>
            <email>b.diedrichsen@googlemail.com</email>
        </developer>
        <developer>
            <id>GotoFinal</id>
            <name>Bart≈Çomiej Mazur</name>
            <email>bartlomiejkmazur@gmail.com</email>
        </developer>
    </developers>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jdk.version>1.8</jdk.version>
        <project.build.java.version>1.8</project.build.java.version>

        <version.library.groovy>2.4.11</version.library.groovy>
        <version.library.intellij-annotations>15.0</version.library.intellij-annotations>
    </properties>

    <distributionManagement>
        <snapshotRepository>
            <id>diorite</id>
            <url>https://repo.diorite.org/repository/diorite/</url>
        </snapshotRepository>
        <repository>
            <id>diorite</id>
            <url>https://repo.diorite.org/repository/diorite/</url>
        </repository>
    </distributionManagement>

    <dependencies>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>1.10.19</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.5</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.5</version>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>${version.library.groovy}</version>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
            <version>${version.library.intellij-annotations}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <defaultGoal>clean install</defaultGoal>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <!-- Sets the VM argument line used when unit tests are run.-->
                    <argLine>${surefireArgLine}</argLine>
                    <skipTests>false</skipTests>
                    <excludes>
                        <!-- exclude the suite which is a convenience class
                        for running all tests from IDE or using scripts -->
                        <exclude>AllTests.java</exclude>
                    </excludes>
                </configuration>
            </plugin>


            <!-- bind the source attaching to package phase -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.4</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.3</version>
                <configuration>
                    <aggregate>true</aggregate>
                    <show>public</show>
                    <nohelp>true</nohelp>
                    <header>mbassador, ${project.version}</header>
                    <footer>mbassador, ${project.version}</footer>
                    <doctitle>mbassador, ${project.version}</doctitle>
                    <additionalparam>-Xdoclint:none</additionalparam>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
            To build and publish the javadoc run
                mvn clean javadoc:javadoc scm-publish:publish-scm
             -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-scm-publish-plugin</artifactId>
                <version>1.1</version>
                <configuration>
                    <checkoutDirectory>${project.build.directory}/scmpublish</checkoutDirectory>
                    <checkinComment>Publishing javadoc for ${project.artifactId}:${project.version}</checkinComment>
                    <content>${project.reporting.outputDirectory}/apidocs</content>
                    <skipDeletedFiles>true</skipDeletedFiles>
                    <pubScmUrl>scm:git:https://github.com/GotoFinal/mbassador.git</pubScmUrl>
                    <scmBranch>gh-pages</scmBranch>
                    <!-- branch with static site on github-->
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>

        <!-- Profile to run full test suite with coverage reporting engine JaCoCo

        mvn clean test -Djacoco

        -->
        <profile>
            <id>jacoco-coverage</id>

            <activation>
                <property>
                    <name>jacoco</name>
                </property>
            </activation>
            <build>
                <plugins>

                    <!-- JaCoCo integration for code coverage reports

               To receive a full list of goals and available parameters you can use maven-help-plugin:
               mvn help:describe -Dplugin=org.jacoco:jacoco-maven-plugin -Ddetail
              -->
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>0.7.5.201505241946</version>
                        <executions>
                            <!--
                                Prepares the property pointing to the JaCoCo runtime agent which
                                is passed as VM argument when Maven the Surefire plugin is executed.
                            -->
                            <execution>
                                <id>pre-unit-test</id>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                                <configuration>
                                    <!-- Sets the path to the file which contains the execution data. -->
                                    <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
                                    <!--
                                        Sets the name of the property containing the settings
                                        for JaCoCo runtime agent.
                                    -->
                                    <!--
                                    <excludes>
                                        <exclude>net.engio.mbassy.bus.error.*</exclude>
                                    </excludes>
                                    -->
                                    <propertyName>surefireArgLine</propertyName>
                                </configuration>
                            </execution>
                            <!--
                                Ensures that the code coverage report for unit tests is created after
                                unit tests have been run.
                            -->
                            <execution>
                                <id>post-unit-test</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                                <configuration>
                                    <!-- Sets the path to the file which contains the execution data. -->
                                    <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
                                    <!-- Sets the output directory for the code coverage report. -->
                                    <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>
    </profiles>
</project>
